
/*** best 5 books per city

all tables

output city isbn authorname year and publisher average rating

step 1 group by location and isbn
 ***/
REGISTER '/home/hai/Tools/pig-0.17.0/lib/piggybank.jar';
user_temp  = LOAD '/user/pig/books/input/BX-Users3.csv' USING org.apache.pig.piggybank.storage.CSVExcelStorage(';', 'NO_MULTILINE', 'UNIX', 'SKIP_INPUT_HEADER') AS (user_id:int, location: chararray, age:int);

books  = LOAD '/user/pig/books/input/BX-Books.csv' USING org.apache.pig.piggybank.storage.CSVExcelStorage(';', 'NO_MULTILINE', 'UNIX', 'SKIP_INPUT_HEADER') AS (ISBN:chararray, book_title:chararray, book_author:chararray, year_of_publication:int ,publisher:chararray, Image_URL_S:chararray, Image_URL_M:chararray, Image_URL_L:chararray);

ratingraw  = LOAD '/user/pig/books/input/BX-Book-Ratings.csv' USING org.apache.pig.piggybank.storage.CSVExcelStorage(';', 'NO_MULTILINE', 'UNIX', 'SKIP_INPUT_HEADER') AS (user_id:int,ISBN:chararray, rating:int);

 rating = FILTER ratingraw BY NOT(rating ==0);

user_tmp2 = FOREACH user_temp GENERATE user_id, flatten(STRSPLIT (location,',',3)) AS (county:chararray, city:chararray, country:chararray),age;

user = FOREACH user_tmp2 GENERATE user_id AS user_id, county AS county:chararray,city AS city:chararray, country AS country:chararray ,age;




nullvaluesremoved = FILTER user BY NOT((city MATCHES '\\W') OR (country MATCHES '\\W') OR (age is null));
finalUsers= FOREACH nullvaluesremoved GENERATE user_id AS user_id, county AS county,city AS city, country AS country ,age AS age;




first_join = JOIN finalUsers BY user_id , rating BY user_id;

user_and_ratings = FOREACH first_join GENERATE 
finalUsers::user_id AS user_id,finalUsers::city AS city,finalUsers::country AS country,finalUsers::age AS age, rating::ISBN AS ISBN,rating::rating AS rating;
describe user_and_ratings;





second_join = JOIN user_and_ratings BY ISBN , books BY ISBN;

finaldata = FOREACH second_join GENERATE 
user_and_ratings::user_id AS user_id,user_and_ratings::city AS city,user_and_ratings::country AS country,user_and_ratings::age AS age, user_and_ratings::ISBN AS ISBN,user_and_ratings::rating AS rating, books::book_title AS book_title , books::book_author AS book_author , books::year_of_publication AS year_of_publication, books::publisher AS publisher;


grp_by_city_ISBN = GROUP finaldata BY (city, ISBN);
 flattened_city_ISBN = FOREACH grp_by_city_ISBN GENERATE
    FLATTEN(group) AS (city, ISBN),
    FLATTEN(finaldata.book_title) ,
    FLATTEN(finaldata.book_author) ,
    FLATTEN(finaldata.year_of_publication),
    FLATTEN(finaldata.country),
    AVG(finaldata.rating) AS AVGrating;
CITYGORUP = GROUP flattened_city_ISBN BY city;
C = FOREACH CITYGORUP {                          
   ordered_by_rating = ORDER flattened_city_ISBN BY AVGrating DESC;                
   DB = LIMIT ordered_by_rating 1;                         
   GENERATE FLATTEN(DB.ISBN), FLATTEN(group),FLATTEN(DB.country) ,FLATTEN(DB.book_title) ,FLATTEN(DB.AVGrating);
};
STORE C INTO '/home/hai/outputdata/allcity';
Describe C;
